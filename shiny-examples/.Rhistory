if(packet_type=="DROPLET")  {
new_data <- DROPLET_Payload_Converter(dataset_call$Payload)
new_data <- as.data.frame(new_data)
}
if(packet_type=="HYGRO")  {
new_data <- HYGRO_Payload_Converter(dataset_call$Payload)
new_data <- as.data.frame(new_data)
}
TimeStamp <- as.POSIXlt(dataset_call$TimeStamp, format="%Y-%m-%dT%H:%M",tz="GMT")
new_data <- cbind(TimeStamp,new_data)
return(new_data)
}
# Data streams
echo <- Live_Data_Converter(echo_data,packet_type="ECHO")
drop <- Live_Data_Converter(drop_data,packet_type="DROPLET")
bounce <- Live_Data_Converter(bounce_data,packet_type="ECHO")
hygro <- Live_Data_Converter(hygro_data,packet_type="HYGRO")
# Produce Plots
p <- ggplot(echo, aes(x=TimeStamp, y=water_level)) +
geom_line( color="#69b3a2",size=1.05) +
xlab("") + ylab("Water level (mm)") +
theme_ipsum() +
theme(axis.text.x=element_text(angle=60, hjust=1))
p
# TIES Presentation Pictures
# TIESGraphs.R
# Author - CA
# Date - 01/12/20
# Libraries
library(tidyverse)
library(jsonlite)
library(httr)
library(reshape2)
library(gridExtra)
library(hrbrthemes)
# Get Sensor Data (1 of each type)
echo_call1 <- "https://87p4rdc00l.execute-api.eu-west-2.amazonaws.com/SEPA_IoT_Stage?device=70B3D54990566062&timestamp=2020-11-15T22:30:11Z"
drop_call1 <- "https://87p4rdc00l.execute-api.eu-west-2.amazonaws.com/SEPA_IoT_Stage?device=70B3D54994B0C83F&timestamp=2020-11-15T22:30:11Z"
bounce_call3 <- "https://87p4rdc00l.execute-api.eu-west-2.amazonaws.com/SEPA_IoT_Stage?device=70B3D51C20000097&timestamp=2020-11-15T22:30:11Z"
hygro_call3 <- "https://87p4rdc00l.execute-api.eu-west-2.amazonaws.com/SEPA_IoT_Stage?device=70B3D51C20000092&timestamp=2020-11-15T22:30:11Z"
#  Get data feed
echo_data <- fromJSON(content(GET(echo_call1),"text"))
drop_data <- fromJSON(content(GET(drop_call1),"text"))
bounce_data <- fromJSON(content(GET(bounce_call3),"text"))
hygro_data <- fromJSON(content(GET(hygro_call3),"text"))
# Transform Data
ECHO_Payload_Converter <- function(payload)  {
water_level <- strtoi(substr(payload,1,4),base = 16L)
enclosure_temp <- strtoi(substr(payload,5,8),base = 16L)/100
voltage <- strtoi(substr(payload,9,12),base = 16L)/1000
water_temp <- strtoi(substr(payload,13,16),base = 16L)/100
status <- strtoi(substr(payload,17,20),base = 16L)
converted_vals <- cbind(water_level,enclosure_temp,voltage,water_temp,status)
return(converted_vals)
}
DROPLET_Payload_Converter <- function(payload) {
air_temp <- strtoi(substr(payload,1,4),base=16L)/100
for(i in 1:length(air_temp))  {
if(air_temp[i] > 250)  {
air_temp[i] <- air_temp[i] - 256
}
}
air_pressure <- strtoi(substr(payload,5,12),base=16L)/100
air_humidity <- strtoi(substr(payload,13,16),base=16L)/100
voltage <- strtoi(substr(payload,17,20),base=16L)/10
realtime_temp <- strtoi(substr(payload,21,24),base=16L)/100
rainfall <- strtoi(substr(payload,25,28),base=16L)*0.2
status <- strtoi(substr(payload,29,32),base=16L)
converted_vals <- cbind(air_temp,air_pressure,air_humidity,voltage,realtime_temp,rainfall,status)
return(converted_vals)
}
HYGRO_Payload_Converter <- function(payload) {
VWC <- strtoi(substr(payload,1,4),base=16L)/10
soil_temp <- strtoi(substr(payload,5,8),base=16L)/100
conductivity <- strtoi(substr(payload,9,12),base=16L)
air_temp <- strtoi(substr(payload,13,16),base=16L)/100
for(i in 1:length(air_temp))  {
if(air_temp[i] > 250)  {
air_temp[i] <- air_temp[i] - 256
}
}
air_humidity <- strtoi(substr(payload,17,20),base=16L)/100
voltage <- strtoi(substr(payload,21,24),base=16L)/1000
status <- strtoi(substr(payload,25,28),base=16L)
converted_vals <- cbind(VWC,soil_temp,conductivity,air_temp,air_humidity,voltage,status)
return(converted_vals)
}
# Convert full dataset
Live_Data_Converter <- function(dataset_call,packet_type="DROPLET") {
if(packet_type=="ECHO") {
new_data <- ECHO_Payload_Converter(dataset_call$Payload)
new_data <- as.data.frame(new_data)
}
if(packet_type=="DROPLET")  {
new_data <- DROPLET_Payload_Converter(dataset_call$Payload)
new_data <- as.data.frame(new_data)
}
if(packet_type=="HYGRO")  {
new_data <- HYGRO_Payload_Converter(dataset_call$Payload)
new_data <- as.data.frame(new_data)
}
TimeStamp <- as.POSIXlt(dataset_call$TimeStamp, format="%Y-%m-%dT%H:%M",tz="GMT")
new_data <- cbind(TimeStamp,new_data)
return(new_data)
}
# Data streams
echo <- Live_Data_Converter(echo_data,packet_type="ECHO")
drop <- Live_Data_Converter(drop_data,packet_type="DROPLET")
bounce <- Live_Data_Converter(bounce_data,packet_type="ECHO")
hygro <- Live_Data_Converter(hygro_data,packet_type="HYGRO")
# Produce Plots
p <- ggplot(echo, aes(x=TimeStamp, y=water_level)) +
geom_line( color="#69b3a2",size=1.05) +
xlab("") + ylab("Water level (mm)") +
theme_ipsum() +
theme(axis.text.x=element_text(angle=60, hjust=1))
p
head(drop)
head(bounce)
head(hygro)
# Produce Plots
echoplot <- ggplot(echo, aes(x=TimeStamp, y=water_level)) +
geom_line( color="#69b3a2",size=1.05) +
xlab("") + ylab("Water level (mm)") +
theme_ipsum() +
theme(axis.text.x=element_text(angle=60, hjust=1))
dropplot <- ggplot(drop, aes(x=TimeStamp, y=rainfall)) +
geom_line( color="#69b3a2",size=1.05) +
xlab("") + ylab("Water level (mm)") +
theme_ipsum() +
theme(axis.text.x=element_text(angle=60, hjust=1))
bounceplot <- ggplot(bounce, aes(x=TimeStamp, y=water_level)) +
geom_line( color="#69b3a2",size=1.05) +
xlab("") + ylab("Water level (mm)") +
theme_ipsum() +
theme(axis.text.x=element_text(angle=60, hjust=1))
hygroplot <- ggplot(hygro, aes(x=TimeStamp, y=VWC)) +
geom_line( color="#69b3a2",size=1.05) +
xlab("") + ylab("Water level (mm)") +
theme_ipsum() +
theme(axis.text.x=element_text(angle=60, hjust=1))
dropplot
bounceplot
hygroplot
drop_melt <- melt(drop,"TimeStamp")
warnings()
ggplot(drop, aes(x=TimeStamp, y=rainfall)) + geom_bar()
ggplot(drop_melt, aes(x=TimeStamp, y=rainfall)) + geom_bar()
drop_melt
head(drop)
drop_melt <- drop[,c(1,7)]
drop_melt <- melt(drop,"TimeStamp")
ggplot(drop_melt, aes(x=TimeStamp, y=rainfall)) + geom_bar()
head(drop_melt)
ggplot(drop_melt, aes(x=TimeStamp, y=value)) + geom_bar()
ggplot(drop_melt, aes(y=value)) + geom_bar()
plot(drop$rainfall)
dropplot <- ggplot(drop, aes(x=TimeStamp, y=rainfall)) +
geom_point( color="#69b3a2",size=1.05) +
xlab("") + ylab("Water level (mm)") +
theme_ipsum() +
theme(axis.text.x=element_text(angle=60, hjust=1))
dropplot
dropplot <- ggplot(drop, aes(x=TimeStamp, y=rainfall)) +
geom_line( color="#69b3a2",size=1.05) +
xlab("") + ylab("Water level (mm)") +
theme_ipsum() +
theme(axis.text.x=element_text(angle=60, hjust=1))
dropplot
grid.arrange(echoplot,dropplot,hygroplot)
# Produce Plots
echoplot <- ggplot(echo, aes(x=TimeStamp, y=water_level)) +
geom_line( color="#69b3a2",size=1.05) +
xlab("") + ylab("Water level (mm)") +
theme_ipsum() +
theme(axis.text.x=element_text(angle=60, hjust=1))
dropplot <- ggplot(drop, aes(x=TimeStamp, y=rainfall)) +
geom_line( color="#69b3a2",size=1.05) +
xlab("") + ylab("Rainfall (mm)") +
theme_ipsum() +
theme(axis.text.x=element_text(angle=60, hjust=1))
bounceplot <- ggplot(bounce, aes(x=TimeStamp, y=water_level)) +
geom_line( color="#69b3a2",size=1.05) +
xlab("") + ylab("Water level (mm)") +
theme_ipsum() +
theme(axis.text.x=element_text(angle=60, hjust=1))
hygroplot <- ggplot(hygro, aes(x=TimeStamp, y=VWC)) +
geom_line( color="#69b3a2",size=1.05) +
xlab("") + ylab("VWC") +
theme_ipsum() +
theme(axis.text.x=element_text(angle=60, hjust=1))
grid.arrange(echoplot,dropplot,hygroplot)
grid.arrange(echoplot,dropplot,hygroplot,top="Sensor data from Elliot Water")
plot(drop$air_humidity)
drop1 <- drop
drop_call1 <- "https://87p4rdc00l.execute-api.eu-west-2.amazonaws.com/SEPA_IoT_Stage?device=70B3D54994B0C83F&timestamp=2020-09-15T22:30:11Z"
drop_data <- fromJSON(content(GET(drop_call1),"text"))
drop <- Live_Data_Converter(drop_data,packet_type="DROPLET")
plot(drop$air_humidity)
tail(drop)
drop2 <- drop
drop_call1 <- "https://87p4rdc00l.execute-api.eu-west-2.amazonaws.com/SEPA_IoT_Stage?device=70B3D54994B0C83F&timestamp=2020-10-05T22:30:11Z"
drop_data <- fromJSON(content(GET(drop_call1),"text"))
drop <- Live_Data_Converter(drop_data,packet_type="DROPLET")
drop[50,]
drop[70,]
drop[60,]
drop[63,]
rbind(drop2,drop[-c(1:62),])
drop2 <- rbind(drop2,drop[-c(1:62),])
plot(drop2$air_humidity)
plot(drop2$air_humidity[1:1000])
plot(drop2$air_humidity[300:500])
plot(drop2$air_humidity[300:500],type='l')
plot(drop2$air_humidity[340:500],type='l')
plot(drop2$air_humidity[310:500],type='l')
plot(drop2$air_humidity[320:500],type='l')
plot(drop2$air_humidity[325:500],type='l')
plot(drop2$air_humidity[328:500],type='l')
plot(drop2$air_humidity[331:500],type='l')
plot(drop2$air_humidity[330:500],type='l')
plot(drop2$air_humidity[329:500],type='l')
plot(drop2$air_humidity[329:1500],type='l')
pot(drop2$air_humidity,type='l')
plot(drop2$air_humidity,type='l')
drop3 <- drop2[300:1600]
drop3 <- drop2[300:1600,]
library(plotly)
plot_ly(drop3$TimeStamp,drop3$air_humidity)
plot_ly(drop3,x=TimeStamp,y=air_humidity)
plot_ly(x=drop3$TimeStamp,y=drop3$air_humidity)
plot_ly(x=drop3$TimeStamp,y=drop3$air_humidity,mode="lines")
#' Solve quadratic equation ax^2 + bx + c = 0
#' @param coefficient of the quadratic term (scalar)
#' @param coefficient of the linear term (scalar)
#' @param coefficient of the intercept term (scalar)
#' @return the real solution(s) as a vector of length 0, 1 or 2.
quadratic <- function(a, b, c) {
if (abs(a)<1e-10) { # Linear case (for really small a the quadratic
# formula is unstable, so we use the linear one)
return(-c/b)
}
delta <- b^2 - 4*a*c # Discriminant
if (abs(delta)<1e-10) { # Exactly one solution (allowing for rounding errors)
return(-b/(2*a))
}
if (delta>0) { # Two real solutions
sol1 <- -(b+sqrt(delta)) / (2*a)
sol2 <- -(b-sqrt(delta)) / (2*a)
return(c(sol1, sol2))
}
return(c()) # Otherwise no solution
}
quadratic(3,4,5)
quadratic(3,4,2)
quadratic(1,4,2)
a <- ggplot(data=health) +
aes(x=HealthExpenditure, y=LifeExpectancy) +
geom_point(aes(colour=Population)) +
scale_colour_distiller(palette="YlOrRd" , trans="log")
load(url("http://www.stats.gla.ac.uk/~levers/rp/w5.RData"))
a <- ggplot(data=health) +
aes(x=HealthExpenditure, y=LifeExpectancy) +
geom_point(aes(colour=Population)) +
scale_colour_distiller(palette="YlOrRd" , trans="log")
a
# TIES Presentation Pictures
# TIESGraphs.R
# Author - CA
# Date - 01/12/20
# Libraries
library(tidyverse)
library(jsonlite)
library(httr)
library(reshape2)
library(gridExtra)
library(hrbrthemes)
# Get Sensor Data (1 of each type)
echo_call1 <- "https://87p4rdc00l.execute-api.eu-west-2.amazonaws.com/SEPA_IoT_Stage?device=70B3D54991EB3BA5&timestamp=2020-11-15T22:30:11Z"
drop_call1 <- "https://87p4rdc00l.execute-api.eu-west-2.amazonaws.com/SEPA_IoT_Stage?device=70B3D54994B0C83F&timestamp=2020-11-21T22:30:11Z"
bounce_call3 <- "https://87p4rdc00l.execute-api.eu-west-2.amazonaws.com/SEPA_IoT_Stage?device=70B3D51C20000097&timestamp=2020-11-15T22:30:11Z"
hygro_call3 <- "https://87p4rdc00l.execute-api.eu-west-2.amazonaws.com/SEPA_IoT_Stage?device=70B3D51C20000092&timestamp=2020-11-15T22:30:11Z"
#  Get data feed
echo_data <- fromJSON(content(GET(echo_call1),"text"))
drop_data <- fromJSON(content(GET(drop_call1),"text"))
bounce_data <- fromJSON(content(GET(bounce_call3),"text"))
hygro_data <- fromJSON(content(GET(hygro_call3),"text"))
# Transform Data
ECHO_Payload_Converter <- function(payload)  {
water_level <- strtoi(substr(payload,1,4),base = 16L)
enclosure_temp <- strtoi(substr(payload,5,8),base = 16L)/100
voltage <- strtoi(substr(payload,9,12),base = 16L)/1000
water_temp <- strtoi(substr(payload,13,16),base = 16L)/100
status <- strtoi(substr(payload,17,20),base = 16L)
converted_vals <- cbind(water_level,enclosure_temp,voltage,water_temp,status)
return(converted_vals)
}
DROPLET_Payload_Converter <- function(payload) {
air_temp <- strtoi(substr(payload,1,4),base=16L)/100
#for(i in 1:length(air_temp))  {
# if(air_temp[i] > 250)  {
#  air_temp[i] <- air_temp[i] - 256
#}
#}
air_pressure <- strtoi(substr(payload,5,12),base=16L)/100
air_humidity <- strtoi(substr(payload,13,16),base=16L)/100
voltage <- strtoi(substr(payload,17,20),base=16L)/10
realtime_temp <- strtoi(substr(payload,21,24),base=16L)/100
rainfall <- strtoi(substr(payload,25,28),base=16L)*0.2
status <- strtoi(substr(payload,29,32),base=16L)
converted_vals <- cbind(air_temp,air_pressure,air_humidity,voltage,realtime_temp,rainfall,status)
return(converted_vals)
}
HYGRO_Payload_Converter <- function(payload) {
VWC <- strtoi(substr(payload,1,4),base=16L)/10
soil_temp <- strtoi(substr(payload,5,8),base=16L)/100
conductivity <- strtoi(substr(payload,9,12),base=16L)
air_temp <- strtoi(substr(payload,13,16),base=16L)/100
for(i in 1:length(air_temp))  {
if(air_temp[i] > 250)  {
air_temp[i] <- air_temp[i] - 256
}
}
air_humidity <- strtoi(substr(payload,17,20),base=16L)/100
voltage <- strtoi(substr(payload,21,24),base=16L)/1000
status <- strtoi(substr(payload,25,28),base=16L)
converted_vals <- cbind(VWC,soil_temp,conductivity,air_temp,air_humidity,voltage,status)
return(converted_vals)
}
# Convert full dataset
Live_Data_Converter <- function(dataset_call,packet_type="DROPLET") {
if(packet_type=="ECHO") {
new_data <- ECHO_Payload_Converter(dataset_call$Payload)
new_data <- as.data.frame(new_data)
}
if(packet_type=="DROPLET")  {
new_data <- DROPLET_Payload_Converter(dataset_call$Payload)
new_data <- as.data.frame(new_data)
}
if(packet_type=="HYGRO")  {
new_data <- HYGRO_Payload_Converter(dataset_call$Payload)
new_data <- as.data.frame(new_data)
}
TimeStamp <- as.POSIXlt(dataset_call$TimeStamp, format="%Y-%m-%dT%H:%M",tz="GMT")
new_data <- cbind(TimeStamp,new_data)
return(new_data)
}
# Data streams
echo <- Live_Data_Converter(echo_data,packet_type="ECHO")
drop <- Live_Data_Converter(drop_data,packet_type="DROPLET")
bounce <- Live_Data_Converter(bounce_data,packet_type="ECHO")
hygro <- Live_Data_Converter(hygro_data,packet_type="HYGRO")
drop_melt <- drop[,c(1,7)]
drop_melt <- melt(drop,"TimeStamp")
# Produce Plots
echoplot <- ggplot(echo, aes(x=TimeStamp, y=water_level)) +
geom_line( color="#69b3a2",size=1.05) +
xlab("") + ylab("Water level (mm)") +
theme_ipsum() +
theme(axis.text.x=element_text(angle=60, hjust=1))
dropplot <- ggplot(drop, aes(x=TimeStamp, y=rainfall)) +
geom_line( color="#69b3a2",size=1.05) +
xlab("") + ylab("Rainfall (mm)") +
theme_ipsum() +
theme(axis.text.x=element_text(angle=60, hjust=1))
bounceplot <- ggplot(bounce, aes(x=TimeStamp, y=water_level)) +
geom_line( color="#69b3a2",size=1.05) +
xlab("") + ylab("Water level (mm)") +
theme_ipsum() +
theme(axis.text.x=element_text(angle=60, hjust=1))
hygroplot <- ggplot(hygro, aes(x=TimeStamp, y=VWC)) +
geom_line( color="#69b3a2",size=1.05) +
xlab("") + ylab("VWC") +
theme_ipsum() +
theme(axis.text.x=element_text(angle=60, hjust=1))
grid.arrange(echoplot,dropplot,hygroplot,top="Sensor data from Elliot Water")
echoplot <- ggplot(echo, aes(x=TimeStamp, y=water_level)) +
geom_line( color="#69b3a2",size=1.5) +
xlab("") + ylab("Water level (mm)") +
theme_ipsum() +
theme(axis.text.x=element_text(angle=60, hjust=1))
dropplot <- ggplot(drop, aes(x=TimeStamp, y=rainfall)) +
geom_line( color="#69b3a2",size=1.5) +
xlab("") + ylab("Rainfall (mm)") +
theme_ipsum() +
theme(axis.text.x=element_text(angle=60, hjust=1))
bounceplot <- ggplot(bounce, aes(x=TimeStamp, y=water_level)) +
geom_line( color="#69b3a2",size=1.5) +
xlab("") + ylab("Water level (mm)") +
theme_ipsum() +
theme(axis.text.x=element_text(angle=60, hjust=1))
hygroplot <- ggplot(hygro, aes(x=TimeStamp, y=VWC)) +
geom_line( color="#69b3a2",size=1.5) +
xlab("") + ylab("VWC") +
theme_ipsum() +
theme(axis.text.x=element_text(angle=60, hjust=1))
grid.arrange(echoplot,dropplot,hygroplot,top="Sensor data from Elliot Water")
load(url("http://www.maths.gla.ac.uk/~levers/rp/covid_date.RData"))
covid %>% select(-AreaName, -Age) %>% colSums()
library(tidyverse)
covid %>% select(-AreaName, -Age) %>% colSums()
covid$AreaName
table(covid$AAreaName)
table(covid$AreaName)
covid
covid$AreaName[covid$AreaName=="England"]
covid$AreaName[covid$AreaName=="United Kingdom"]
covid %>% select(-AreaName, -Age) %>% colSums()
A <- diag(c(1,4,7))
A[2,3] <- 9
A <- rbind(c(1, 0, 0),
c(0, 4, 9),
c(0, 0, 7))
A
A <- diag(c(1,4,7))
A[2,3] <- 9
A
flow <- read.table ("https://www.maths.gla.ac.uk/~levers/rp/flow.txt", header = TRUE, sep=",",na.strings = "-")
flow
flow <- read.table ("https://www.maths.gla.ac.uk/~levers/rp/flow.txt")
flow
dim(flow)
flow <- read.table ("https://www.maths.gla.ac.uk/~levers/rp/flow.txt",header="T")
flow <- read.table ("https://www.maths.gla.ac.uk/~levers/rp/flow.txt",header=T)
head(flow)
flow <- read.table ("https://www.maths.gla.ac.uk/~levers/rp/flow.txt",header=T,sep=",")
flow
n <- 10000
friend.1 <- runif(n, 0, 60)
friend.2 <- runif(n, 0, 60)
friend.1
diff <- abs(friend.1-friend.2)
meetings <- sum(diff<15)
prop_meet <- meetings/10000
prop_meet
meetings
length(diff<15)
length(drop_call_json1)
load(url("http://www.maths.gla.ac.uk/~levers/rp/starwars.RData"))
head(starwars)
View(starwars)
starwars[starwars$name=="Luke Skywalker",]
starwars[starwars$name=="Luke Skywalker",eye_color]
starwars[starwars$name=="Luke Skywalker","eye_color"]
subset(starwars,height > starwars[starwars$name=="Han Solo","height"])
nrow(subset(starwars,height > starwars[starwars$name=="Han Solo","height"]))
starwars <- transform(starwars,BMI= (10000*mass)/(height^2))
starwars[which.max(starwars$BMI),"name"]
subset(starwars, starwars$name == "Chewbacca")
subset(starwars, starwars$name == "Chewbacca")$homeworld
chewie_home <- subset(starwars, starwars$name == "Chewbacca")$homeworld
chewie_home
subset(starwars,homeworld==chewie_home)
subset(starwars,homeworld==chewie_home)$name
subset(starwars,homeworld==chewie_home)$name[-"Chewbacca"]
A <- diag(c(1,4,7))
A
A[2,3] <- 9
A
A <- rbind(c(1,0,0),
c(0,4,9),
c(0,0,7))
A
flow <- read.table("https://www.maths.gla.ac.uk/~levers/rp/flow.txt")
head(flow)
flow <- read.table("https://www.maths.gla.ac.uk/~levers/rp/flow.txt",header=TRUE)
head(flow)
flow <- read.table("https://www.maths.gla.ac.uk/~levers/rp/flow.txt",header=TRUE,sep=",")
head(flow)
flow <- read.table("https://www.maths.gla.ac.uk/~levers/rp/flow.txt",header=TRUE,sep=",",na.strings = "-")
head(flow)
n <- 10000
friend.1 <- runif(n, 0, 60)
friend.2 <- runif(n, 0, 60)
head(friend.1)
diff <- abs(friend.1 - friend.2)
head(diff)
diff < 15
sum(diff < 15)
meetings <- sum(diff < 15)
prop_meet <- meetings/n
prop_meet
load(url("http://www.maths.gla.ac.uk/~levers/rp/starwars.RData"))
View(starwars)
starwars[starwars$name=="Luke Skywalker",]
starwars[starwars$name=="Luke Skywalker","eye_color"]
starwars[starwars$name=="Han Solo","height"]
# b
subset(starwars, height > starwars[starwars$name=="Han Solo","height"])
# b
nrow(subset(starwars, height > starwars[starwars$name=="Han Solo","height"]))
# c
starwars <- transform(starwars, BMI = (10000*mass)/(height^2))
View(starwars)
# d
starwars[which.max(starwars$BMI),]
# d
starwars[which.max(starwars$BMI),"name"]
# e
chewie_home <- subset(starwars,starwars$name=="Chewbacca")$homeworld
chewie_home
subset(starwars,homeworld=chewie_home)$name
# e
chewie_home <- subset(starwars,name=="Chewbacca")$homeworld
subset(starwars,homeworld=chewie_home)$name
subset(starwars,homeworld==chewie_home)$name
flow <- read.table("https://www.maths.gla.ac.uk/~levers/rp/flow.txt",header=TRUE,sep=",",na.strings = "-")
flow <- read.table("https://www.maths.gla.ac.uk/~levers/rp/flow.txt",header=TRUE,na.strings = "-")
flow
dim(flow)
setwd("C:/Users/staff/OneDrive - University of Glasgow/R Programming/2020-2021/Lecture Material/Week 9/Shiny Apps")
shiny::runApp('Example1')
